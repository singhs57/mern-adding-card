{"ast":null,"code":"//a reducer is a function which accepts a state and also accepts a action, based on the action type it return the state\nexport default ((posts = [], action) => {\n  //we are not using reducers over here so we did export default. Inside CombineReducers we are using reducers.\n  switch (action.type) {\n    case \"FETCH_ALL\":\n      return action.payload;\n\n    case \"CREATE\":\n      return [...posts, action.payload];\n    //we have spread all our state, then pass a new state using action.payload\n\n    case \"UPDATE\":\n      return posts.map(post => post._id === action.payload._id ? action.payload : post);\n    //arrya.map = array ,\n    // for a single post , if post._id matches with payload._id then it will reaturn a new updatedPost or else it will return previous state\n\n    case \"DELETE\":\n      return posts.filter(post => post._id !== action.payload);\n\n    default:\n      return posts;\n  }\n});","map":{"version":3,"sources":["I:/CRUD_Adding_Card/app_client/src/reducers/posts.js"],"names":["posts","action","type","payload","map","post","_id","filter"],"mappings":"AAAA;AAEA,gBAAe,CAACA,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACrC;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAOD,MAAM,CAACE,OAAd;;AAEF,SAAK,QAAL;AACE,aAAO,CAAC,GAAGH,KAAJ,EAAWC,MAAM,CAACE,OAAlB,CAAP;AAAmC;;AAErC,SAAK,QAAL;AACE,aAAOH,KAAK,CAACI,GAAN,CAAWC,IAAD,IACfA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAAP,CAAeG,GAA5B,GAAkCL,MAAM,CAACE,OAAzC,GAAmDE,IAD9C,CAAP;AAGF;AACA;;AACA,SAAK,QAAL;AACE,aAAOL,KAAK,CAACO,MAAN,CAAcF,IAAD,IAAUA,IAAI,CAACC,GAAL,KAAaL,MAAM,CAACE,OAA3C,CAAP;;AACF;AACE,aAAOH,KAAP;AAhBJ;AAkBD,CApBD","sourcesContent":["//a reducer is a function which accepts a state and also accepts a action, based on the action type it return the state\r\n\r\nexport default (posts = [], action) => {\r\n  //we are not using reducers over here so we did export default. Inside CombineReducers we are using reducers.\r\n  switch (action.type) {\r\n    case \"FETCH_ALL\":\r\n      return action.payload;\r\n\r\n    case \"CREATE\":\r\n      return [...posts, action.payload]; //we have spread all our state, then pass a new state using action.payload\r\n\r\n    case \"UPDATE\":\r\n      return posts.map((post) =>\r\n        post._id === action.payload._id ? action.payload : post\r\n      );\r\n    //arrya.map = array ,\r\n    // for a single post , if post._id matches with payload._id then it will reaturn a new updatedPost or else it will return previous state\r\n    case \"DELETE\":\r\n      return posts.filter((post) => post._id !== action.payload);\r\n    default:\r\n      return posts;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}