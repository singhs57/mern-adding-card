{"ast":null,"code":"import * as api from \"../api\"; // we have import everything from actions as api\n//Action Creators are functions that return actions\n//creating action creators\n//action is an object which has type and payload\n\nexport const getPosts = () => async dispatch => {\n  //as a set of property we get access to dispatch by passing dispatch inside ().\n  //redux thunk allows us to in here specify additional error function\n  //using async (dispatch) we have created a function that returns another function. Now we can use async await property\n  try {\n    const {\n      data\n    } = await api.fetchPosts(); //we are first getting a response from api and in resonse we have data as object\n\n    dispatch({\n      type: \"FETCH_ALL\",\n      payload: data\n    }); // instead of returning an action we need to dispatch the action if using redux thunk.\n    // payload: are data where we store all our posts\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const createPost = post => async dispatch => {\n  // 2> then we are receiving a post\n  //dispatch comes from redux thunk\n  try {\n    const {\n      data\n    } = await api.createPost(post); // 1> we have first distructure the response as {data}, then we are making a post api request to our backend server. We are sending a post there.\n\n    dispatch({\n      type: \"CREATE\",\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: \"UPDATE\",\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: \"DELETE\",\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["I:/CRUD_Adding_Card/app_client/src/actions/posts.js"],"names":["api","getPosts","dispatch","data","fetchPosts","type","payload","error","console","log","message","createPost","post","updatePost","id","deletePost"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,QAArB,C,CAA+B;AAE/B;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAChD;AACA;AACA;AACA,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,GAAG,CAACI,UAAJ,EAAvB,CADE,CACuC;;AACzCF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,WAAR;AAAqBC,MAAAA,OAAO,EAAEH;AAA9B,KAAD,CAAR,CAFE,CAGF;AACA;AACD,GALD,CAKE,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;AACF,CAZM;AAcP,OAAO,MAAMC,UAAU,GAAIC,IAAD,IAAU,MAAOV,QAAP,IAAoB;AACtD;AACA;AACA,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,GAAG,CAACW,UAAJ,CAAeC,IAAf,CAAvB,CADE,CAC2C;;AAC7CV,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE,QADC;AAEPC,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GAND,CAME,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAZM;AAcP,OAAO,MAAMM,UAAU,GAAG,CAACC,EAAD,EAAKF,IAAL,KAAc,MAAOV,QAAP,IAAoB;AAC1D,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMH,GAAG,CAACa,UAAJ,CAAeC,EAAf,EAAmBF,IAAnB,CAAvB;AACAV,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE,QADC;AAEPC,MAAAA,OAAO,EAAEH;AAFF,KAAD,CAAR;AAID,GAND,CAME,OAAOI,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAVM;AAYP,OAAO,MAAMQ,UAAU,GAAID,EAAD,IAAQ,MAAOZ,QAAP,IAAoB;AACpD,MAAI;AACF,UAAMF,GAAG,CAACe,UAAJ,CAAeD,EAAf,CAAN;AACAZ,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE,QADC;AAEPC,MAAAA,OAAO,EAAEQ;AAFF,KAAD,CAAR;AAID,GAND,CAME,OAAOP,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,CAVM","sourcesContent":["import * as api from \"../api\"; // we have import everything from actions as api\r\n\r\n//Action Creators are functions that return actions\r\n//creating action creators\r\n//action is an object which has type and payload\r\n\r\nexport const getPosts = () => async (dispatch) => {\r\n  //as a set of property we get access to dispatch by passing dispatch inside ().\r\n  //redux thunk allows us to in here specify additional error function\r\n  //using async (dispatch) we have created a function that returns another function. Now we can use async await property\r\n  try {\r\n    const { data } = await api.fetchPosts(); //we are first getting a response from api and in resonse we have data as object\r\n    dispatch({ type: \"FETCH_ALL\", payload: data });\r\n    // instead of returning an action we need to dispatch the action if using redux thunk.\r\n    // payload: are data where we store all our posts\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\n\r\nexport const createPost = (post) => async (dispatch) => {\r\n  // 2> then we are receiving a post\r\n  //dispatch comes from redux thunk\r\n  try {\r\n    const { data } = await api.createPost(post); // 1> we have first distructure the response as {data}, then we are making a post api request to our backend server. We are sending a post there.\r\n    dispatch({\r\n      type: \"CREATE\",\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const updatePost = (id, post) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.updatePost(id, post);\r\n    dispatch({\r\n      type: \"UPDATE\",\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const deletePost = (id) => async (dispatch) => {\r\n  try {\r\n    await api.deletePost(id);\r\n    dispatch({\r\n      type: \"DELETE\",\r\n      payload: id,\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}