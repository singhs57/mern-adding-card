{"ast":null,"code":"var _jsxFileName = \"I:\\\\CRUD_Adding_Card\\\\app_client\\\\src\\\\Form\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport useStyles from \"./styles\";\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\nimport FileBase from \"react-file-base64\";\nimport { useDispatch, useSelector } from \"react-redux\"; //once action is created, we need to use dispatch to dispatch that action\n\nimport { createPost, updatePost } from \"../actions/posts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Form = ({\n  currentId,\n  setCurrentId\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [postData, setPostData] = useState({\n    creator: \"\",\n    title: \"\",\n    message: \"\",\n    selectedFile: \"\",\n    tags: \"\"\n  });\n  const post = useSelector(state => currentId ? state.posts.find(p => p._id === currentId) : null // for this case we only want data for the post which need to be updated,\n  //if current Id is not null means a id is present, then we need to loop over all the posts present and use find method on them.\n  //more specificaly we need to find a post which has same id as current id, if not it wll return null.\n  ); // here we are using useEffect to populate the values of the form.\n  //it accepts two parameters, first call back and secnd a dependency array.\n\n  useEffect(() => {\n    if (post) setPostData(post); //2> if post exists then we are going to set post data and we are going to populate it using setState i.e setPostData\n  }, [post]); // 1> when array changes from nothing to actual post then useEffect should run\n\n  const handleSubmit = e => {\n    //once we click on HandleSubmit button and action is dispatch then we need to go to posts.js reducers.\n    //we need to send over an array of data.\n    e.preventDefault(); // dispatch(createPost(postData));\n\n    if (currentId) {\n      dispatch(updatePost(currentId, postData));\n    } else {\n      dispatch(createPost(postData)); //we have dispatch an action. Inside createPost we have pass all our state\n    }\n\n    clear();\n  };\n\n  const clear = () => {\n    setCurrentId(null);\n    setPostData({\n      creator: \"\",\n      title: \"\",\n      message: \"\",\n      selectedFile: \"\",\n      tags: \"\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.paper,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      noValidate: true,\n      className: `${classes.root} ${classes.form}`,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [currentId ? \"Editing\" : \"Creating\", \" details card\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"creator\",\n        variant: \"outlined\",\n        label: \"Creator\",\n        fullWidth: true,\n        value: postData.creator,\n        onChange: e => setPostData({ ...postData,\n          creator: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"title\",\n        variant: \"outlined\",\n        label: \"Title\",\n        fullWidth: true,\n        value: postData.title,\n        onChange: e => setPostData({ ...postData,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"message\",\n        variant: \"outlined\",\n        label: \"Message\",\n        fullWidth: true,\n        value: postData.message,\n        onChange: e => setPostData({ ...postData,\n          message: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"tags\",\n        variant: \"outlined\",\n        label: \"Tags\",\n        fullWidth: true,\n        value: postData.tags,\n        onChange: e => setPostData({ ...postData,\n          tags: e.target.value.split(\",\")\n        }) // split is used to seperate the words\n\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.fileInput,\n        children: /*#__PURE__*/_jsxDEV(FileBase, {\n          type: \"file\",\n          multiple: false,\n          onDone: ({\n            base64\n          }) => setPostData({ ...postData,\n            selectedFile: base64\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.buttonSubmit,\n        variant: \"contained\",\n        color: \"primary\",\n        size: \"large\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        size: \"small\",\n        onClick: clear,\n        fullWidth: true,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Form, \"kLEsfmgkGUQoMwTgSzCO4P3VDv0=\", false, function () {\n  return [useStyles, useDispatch, useSelector];\n});\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["I:/CRUD_Adding_Card/app_client/src/Form/Form.js"],"names":["React","useState","useEffect","useStyles","TextField","Button","Typography","Paper","FileBase","useDispatch","useSelector","createPost","updatePost","Form","currentId","setCurrentId","classes","dispatch","postData","setPostData","creator","title","message","selectedFile","tags","post","state","posts","find","p","_id","handleSubmit","e","preventDefault","clear","paper","root","form","target","value","split","fileInput","base64","buttonSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport useStyles from \"./styles\";\r\nimport { TextField, Button, Typography, Paper } from \"@material-ui/core\";\r\nimport FileBase from \"react-file-base64\";\r\nimport { useDispatch, useSelector } from \"react-redux\"; //once action is created, we need to use dispatch to dispatch that action\r\nimport { createPost, updatePost } from \"../actions/posts\";\r\n\r\nconst Form = ({ currentId, setCurrentId }) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [postData, setPostData] = useState({\r\n    creator: \"\",\r\n    title: \"\",\r\n    message: \"\",\r\n    selectedFile: \"\",\r\n    tags: \"\",\r\n  });\r\n  const post = useSelector(\r\n    (state) => (currentId ? state.posts.find((p) => p._id === currentId) : null)\r\n    // for this case we only want data for the post which need to be updated,\r\n    //if current Id is not null means a id is present, then we need to loop over all the posts present and use find method on them.\r\n    //more specificaly we need to find a post which has same id as current id, if not it wll return null.\r\n  );\r\n  // here we are using useEffect to populate the values of the form.\r\n  //it accepts two parameters, first call back and secnd a dependency array.\r\n  useEffect(() => {\r\n    if (post) setPostData(post); //2> if post exists then we are going to set post data and we are going to populate it using setState i.e setPostData\r\n  }, [post]); // 1> when array changes from nothing to actual post then useEffect should run\r\n\r\n  const handleSubmit = (e) => {\r\n    //once we click on HandleSubmit button and action is dispatch then we need to go to posts.js reducers.\r\n    //we need to send over an array of data.\r\n    e.preventDefault();\r\n    // dispatch(createPost(postData));\r\n\r\n    if (currentId) {\r\n      dispatch(updatePost(currentId, postData));\r\n    } else {\r\n      dispatch(createPost(postData)); //we have dispatch an action. Inside createPost we have pass all our state\r\n    }\r\n    clear();\r\n  };\r\n\r\n  const clear = () => {\r\n    setCurrentId(null);\r\n    setPostData({\r\n      creator: \"\",\r\n      title: \"\",\r\n      message: \"\",\r\n      selectedFile: \"\",\r\n      tags: \"\",\r\n    });\r\n  };\r\n  return (\r\n    <Paper className={classes.paper}>\r\n      <form\r\n        autoComplete=\"off\"\r\n        noValidate\r\n        className={`${classes.root} ${classes.form}`}\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <Typography variant=\"h6\">\r\n          {currentId ? \"Editing\" : \"Creating\"} details card\r\n        </Typography>\r\n        <TextField\r\n          name=\"creator\"\r\n          variant=\"outlined\"\r\n          label=\"Creator\"\r\n          fullWidth\r\n          value={postData.creator}\r\n          onChange={(e) =>\r\n            setPostData({ ...postData, creator: e.target.value })\r\n          }\r\n        />\r\n        <TextField\r\n          name=\"title\"\r\n          variant=\"outlined\"\r\n          label=\"Title\"\r\n          fullWidth\r\n          value={postData.title}\r\n          onChange={(e) => setPostData({ ...postData, title: e.target.value })}\r\n        />\r\n        <TextField\r\n          name=\"message\"\r\n          variant=\"outlined\"\r\n          label=\"Message\"\r\n          fullWidth\r\n          value={postData.message}\r\n          onChange={(e) =>\r\n            setPostData({ ...postData, message: e.target.value })\r\n          }\r\n        />\r\n        <TextField\r\n          name=\"tags\"\r\n          variant=\"outlined\"\r\n          label=\"Tags\"\r\n          fullWidth\r\n          value={postData.tags}\r\n          onChange={\r\n            (e) => setPostData({ ...postData, tags: e.target.value.split(\",\") }) // split is used to seperate the words\r\n          }\r\n        />\r\n        <div className={classes.fileInput}>\r\n          <FileBase\r\n            type=\"file\"\r\n            multiple={false}\r\n            onDone={({ base64 }) =>\r\n              setPostData({ ...postData, selectedFile: base64 })\r\n            }\r\n          />\r\n        </div>\r\n        <Button\r\n          className={classes.buttonSubmit}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          size=\"large\"\r\n          type=\"submit\"\r\n          fullWidth\r\n        >\r\n          Submit\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          onClick={clear}\r\n          fullWidth\r\n        >\r\n          Clear\r\n        </Button>\r\n      </form>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}